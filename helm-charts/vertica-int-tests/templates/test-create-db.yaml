# (c) Copyright [2021] Micro Focus or one of its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-clean-s3
data:
  entrypoint.sh: |-
    #!/bin/bash
    set -o errexit
    set -o xtrace

    {{- $protocol := ternary "https://" "http://" (eq .Values.communalStorage.s3.enableHttps "1") -}}
    {{- $endpoint := printf "--endpoint %s%s" $protocol .Values.communalStorage.s3.endpoint }}
    aws s3 ls {{ .Values.communalStorage.path }} {{ $endpoint }} || :
    if aws s3 ls {{ .Values.communalStorage.path }} {{ $endpoint }} 2>&1 | grep -q 'NoSuchBucket'
    then
      aws s3 mb {{ $endpoint }} {{ .Values.communalStorage.path }}
    else
      aws s3 rm --recursive {{ $endpoint }} {{ .Values.communalStorage.path }}
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-clean-shared-fs
data:
  entrypoint.sh: |-
    #!/bin/bash
    set -o errexit
    set -o xtrace

    POD_NAME=$(kubectl get pods --selector=vertica.com/usage=server,app.kubernetes.io/name=vertica -o jsonpath="{.items[0].metadata.name}")
    kubectl exec $POD_NAME -i -- bash -c "rm -rf {{ .Values.communalStorage.path }}/*"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-create-db
data:
  entrypoint.sh: |-
    #!/bin/bash
    set -o errexit
    set -o xtrace

    # It is assumed that vertica has been installed on all pods
    ALL_HOSTS=$(kubectl get pods --selector=vertica.com/usage=server,app.kubernetes.io/name=vertica -o=jsonpath='{range .items[*]}{.metadata.name}.{.spec.subdomain},{end}' | sed 's/.$//')
    POD_NAME=$(kubectl get pods --selector=vertica.com/usage=server,app.kubernetes.io/name=vertica -o jsonpath="{.items[0].metadata.name}")
    DEPOT_PATH=$(kubectl exec $POD_NAME -i -- cat /etc/podinfo/local-data-path)/depot
    DB_NAME=$(kubectl exec $POD_NAME -i -- cat /etc/podinfo/database-name)

    cat << EOF > /tmp/create.sh
    #!/bin/sh
    set -o xtrace
    set -o errexit

    SU_PASSWD=\$(cat /etc/podinfo/superuser-passwd 2> /dev/null || :)
    if [ -n "\$SU_PASSWD" ]
    then
      AT_PASSWD_OPT="--password \$SU_PASSWD"
      VSQL_PASSWD_OPT="-w \$SU_PASSWD"
    fi

    {{- if regexMatch "^s3://.*" .Values.communalStorage.path }}
    AUTH_FILE="/home/dbadmin/auth_params.conf"
    cat <<EOF2 | tee \$AUTH_FILE
    awsauth = {{ .Values.communalStorage.s3.awsAccessKey }}:{{ .Values.communalStorage.s3.awsSecretKey }}
    awsendpoint = {{ .Values.communalStorage.s3.endpoint }}
    awsenablehttps = {{ .Values.communalStorage.s3.enableHttps }}
    EOF2

    AUTH_OPT_OR_NONE="-x \$AUTH_FILE"
    {{- end }}

    COMMUNAL_STORAGE_OPT="--communal-storage-location={{ .Values.communalStorage.path }}"
    SHARD_OPT="--shard-count={{ default 4 .Values.communalStorage.shards }}"
    DEPOT_PATH="--depot-path=$DEPOT_PATH"

    /opt/vertica/bin/admintools -t create_db \
      --skip-fs-checks \
      --hosts=$ALL_HOSTS \
      \$AT_PASSWD_OPT \
      \$COMMUNAL_STORAGE_OPT \
      \$AUTH_OPT_OR_NONE \
      \$SHARD_OPT \
      \$DEPOT_PATH \
      --database $DB_NAME

    vsql \$VSQL_PASSWD_OPT -c 'SELECT NODE_NAME, NODE_ADDRESS, NODE_STATE FROM NODES;'
    EOF
    kubectl cp /tmp/create.sh $POD_NAME:/home/dbadmin/create.sh

    kubectl exec $POD_NAME -i -- sh /home/dbadmin/create.sh
---
apiVersion: testing.kyma-project.io/v1alpha1
kind: TestDefinition
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    order: "1"
  name: test-create-db
spec:
  description: |
    Creates an EON database in the cluster.  The .Values.communalStorage.path
    defines the storage backend -- it can be either s3 or a mounted path.  A
    prereq for this test is that the install has been run.
  template:
    spec:
      {{- if regexMatch "^s3://.*" .Values.communalStorage.path }}
      initContainers:
        - image: amazon/aws-cli
          imagePullPolicy: IfNotPresent
          name: clean-communal-s3
          command: ["/bin/entrypoint.sh"]
          volumeMounts:
            - name: clean-s3-volume
              mountPath: /bin/entrypoint.sh
              subPath: entrypoint.sh
          env:
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.communalStorage.s3.awsAccessKey | quote }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.communalStorage.s3.awsSecretKey | quote }}
      {{- else }}
      initContainers:
        - name: clean-communal-shared-fs
          image: quay.io/helmpack/chart-testing:v3.3.1
          command: ["/bin/entrypoint.sh"]
          volumeMounts:
            - name: clean-shared-fs-volume
              mountPath: /bin/entrypoint.sh
              readOnly: true
              subPath: entrypoint.sh
      {{- end }}
      containers:
        - name: test
          image: quay.io/helmpack/chart-testing:v3.3.1
          command: ["/bin/entrypoint.sh"]
          volumeMounts:
            - name: entrypoint-volume
              mountPath: /bin/entrypoint.sh
              readOnly: true
              subPath: entrypoint.sh
      volumes:
        - name: entrypoint-volume
          configMap:
            defaultMode: 0700
            name: script-create-db
        - name: clean-s3-volume
          configMap:
            defaultMode: 0700
            name: script-clean-s3
        - name: clean-shared-fs-volume
          configMap:
            defaultMode: 0700
            name: script-clean-shared-fs
