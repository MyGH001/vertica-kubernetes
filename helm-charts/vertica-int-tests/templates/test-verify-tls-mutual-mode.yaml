# (c) Copyright [2021] Micro Focus or one of its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: script-verify-tls-mutual-mode
data:
  entrypoint.sh: |-
    #!/bin/bash
    set -o errexit
    set -o xtrace

    # Setup mutual mode at one of the pods.
    #
    ROOT_CA=$(cat /certs/server/tls.rootca)
    CLIENT_KEY=$(cat /certs/client/tls.key)
    CLIENT_CRT=$(cat /certs/client/tls.crt)
    POD_NAME=$(kubectl get pods --selector=app.kubernetes.io/name=vertica,vertica.com/usage=server -o jsonpath="{.items[0].metadata.name}")

    cat << EOF > /tmp/setup.sh
    #!/bin/sh
    set -o xtrace
    set -o errexit

    SU_PASSWD=\$(cat /etc/podinfo/superuser-passwd 2> /dev/null || :)
    if [ -n "\$SU_PASSWD" ]
    then
      VSQL_PASSWD_OPT="-w \$SU_PASSWD"
    fi

    DBNAME=\$(cat /etc/podinfo/database-name)

    vsql \$VSQL_PASSWD_OPT -c "select set_config_parameter('SSLCA', '$ROOT_CA');"
    EOF
    kubectl cp /tmp/setup.sh $POD_NAME:/home/dbadmin/setup.sh
    kubectl exec $POD_NAME -i -- sh /home/dbadmin/setup.sh


    # Verify we have mutual mode at each pod
    #
    cat << EOF > /tmp/verify.sh
    #!/bin/sh
    set -o xtrace
    set -o errexit

    SU_PASSWD=\$(cat /etc/podinfo/superuser-passwd 2> /dev/null || :)
    if [ -n "\$SU_PASSWD" ]
    then
      VSQL_PASSWD_OPT="-w \$SU_PASSWD"
    fi

    DBNAME=\$(cat /etc/podinfo/database-name)
    export VSQL_HOME=/tmp
    mkdir -p \$VSQL_HOME/.vsql
    echo "$CLIENT_KEY" > \$VSQL_HOME/.vsql/client.key
    echo "$CLIENT_CRT" > \$VSQL_HOME/.vsql/client.crt
    chmod 0700 \$VSQL_HOME/.vsql/client.*

    vsql \$VSQL_PASSWD_OPT -m require -c "select user_name, ssl_state from sessions where session_id=current_session();" 2>&1 | tee /home/dbadmin/vsql_cmds.out
    grep "dbadmin   | Mutual" /home/dbadmin/vsql_cmds.out
    EOF

    ALL_PODS=$(kubectl get pods --selector=vertica.com/usage=server,app.kubernetes.io/name=vertica -o=jsonpath='{.items[*].metadata.name}')
    for pod_name in $ALL_PODS
    do
      kubectl cp /tmp/verify.sh $pod_name:/home/dbadmin/verify.sh
      kubectl exec $pod_name -i -- sh /home/dbadmin/verify.sh
    done

    # Turn off mutual mode
    #
    cat << EOF > /tmp/term.sh
    #!/bin/sh
    set -o xtrace
    set -o errexit

    SU_PASSWD=\$(cat /etc/podinfo/superuser-passwd 2> /dev/null || :)
    if [ -n "\$SU_PASSWD" ]
    then
      VSQL_PASSWD_OPT="-w \$SU_PASSWD"
    fi

    vsql \$VSQL_PASSWD_OPT -c "select set_config_parameter('SSLCA', '');"
    EOF
    kubectl cp /tmp/term.sh $POD_NAME:/home/dbadmin/term.sh
    kubectl exec $POD_NAME -i -- sh /home/dbadmin/term.sh
---
apiVersion: testing.kyma-project.io/v1alpha1
kind: TestDefinition
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: test-verify-tls-mutual-mode
spec:
  description: |
    Sets mTLS then runs some tests to verify its setup and clients can still
    connect.  At the end of the run, mTLS will be disabled.
  template:
    spec:
      containers:
        - name: test
          image: quay.io/helmpack/chart-testing:v3.3.1
          command: ["/bin/entrypoint.sh"]
          volumeMounts:
            - name: entrypoint-volume
              mountPath: /bin/entrypoint.sh
              subPath: entrypoint.sh
            - name: server-tls-parms
              mountPath: /certs/server
            - name: client-tls-parms
              mountPath: /certs/client
      volumes:
        - name: entrypoint-volume
          configMap:
            defaultMode: 0700
            name: script-verify-tls-mutual-mode
        - name: server-tls-parms
          secret:
            secretName: {{ .Values.tls.serverSecret }}
        - name: client-tls-parms
          secret:
            secretName: {{ .Values.tls.clientSecret }}
